package templates

import "embed"

//go:embed *
var FS embed.FS

// 在创建二进制文件时，自带的gohtml可以被动态解析，因为保存的是相对地址
// 如果单纯的运行该可执行文件时，可能会出现错误，这主要是因为相对路径中可能不存在需要的文件
// 因此，可以将这些模板文件嵌入到二进制可执行文件中
// 一种方法是将相关的文件存储为字符串变量处理

// go:embed 是一条嵌入文件的指令 后面的*被称为glob 模式，用于匹配文件类型
// 对于嵌入式，需要使用"/"正斜杠表示路径

// ParseFiles创建一个新的模板，并从指定的文件中解析模板定义。返回的模板名称将是第一个文件的base name，而模板的内容将是解析后的内容
// 至少必须提供一个文件。如果发生错误，解析过程将停止，并且返回的 *Template 对象将是 nil。
// 当在不同目录中解析具有相同名称的多个文件时，最后提到的那个文件将会是结果。
// 例如，ParseFiles("a/foo", "b/foo") 会将 “b/foo” 存储为名为 “foo” 的模板，而 “a/foo” 则不可用。
// 这意味着，如果多个文件具有相同的模板名称，并且你使用 ParseFiles 函数来解析它们，那么最后解析的文件将覆盖之前解析的同名文件。
// 因此，你需要确保在解析时文件的顺序是正确的，或者避免在不同的文件中使用相同的模板名称，除非你确实想要覆盖之前的定义。
